name: Build Release

on:
  workflow_dispatch:
    inputs:
      title:
        description: "Release Title"
        required: false
        default: ""
      prerelease:
        description: "Pre-release"
        required: true
        default: false
        type: boolean

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.readmeta.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Read version from Cargo.toml
        id: readmeta
        shell: sh
        run: |
          set -eu
          META="$(cargo metadata --no-deps --format-version=1)"
          VERSION="$(printf '%s' "$META" | jq -r '.packages[0].version')"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          printf 'Detected version: %s\n' "$VERSION"

      - name: Log inputs
        shell: sh
        run: |
          set -eu
          printf "Title:       '%s'\n" "${{ github.event.inputs.title }}"
          printf "Pre-Release: %s\n"    "${{ github.event.inputs.prerelease }}"

  build:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          # -------- Linux --------
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: ""
            can_run: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            ext: ""
            can_run: false
          # -------- macOS --------
          - os: macos-13
            target: x86_64-apple-darwin
            ext: ""
            can_run: true
          - os: macos-14
            target: aarch64-apple-darwin
            ext: ""
            can_run: true
          # -------- Windows ------
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: ".exe"
            can_run: true
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            ext: ".exe"
            can_run: false
    runs-on: ${{ matrix.os }}
    env:
      BIN_NAME: ipchk
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable + target)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      # Linux aarch64 cross: install GCC toolchain & set linkers
      - name: Install aarch64 Linux cross toolchain
        if: ${{ runner.os == 'Linux' && matrix.target == 'aarch64-unknown-linux-gnu' }}
        shell: sh
        run: |
          set -eu
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
          {
            echo 'CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc'
            echo 'CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++'
            echo 'AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar'
            echo 'CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc'
          } >> "$GITHUB_ENV"

      # ---------- Build ----------
      - name: Build (release) [POSIX]
        if: ${{ runner.os != 'Windows' }}
        shell: sh
        run: |
          set -eu
          cargo build --release --target "$TARGET"

      - name: Build (release) [Windows]
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          cargo build --release --target "$env:TARGET"

      # ---------- Test ----------
      - name: Run tests (release) [POSIX]
        if: ${{ runner.os != 'Windows' && matrix.can_run == true }}
        shell: sh
        run: |
          set -eu
          cargo test --release --all --locked

      - name: Run tests (release) [Windows]
        if: ${{ runner.os == 'Windows' && matrix.can_run == true }}
        shell: pwsh
        run: |
          cargo test --release --all --locked

      # ---------- Smoke test ----------
      - name: Smoke test ipchk (POSIX)
        if: ${{ runner.os != 'Windows' && matrix.can_run == true }}
        shell: sh
        run: |
          set -eu
          BIN="target/${TARGET}/release/${BIN_NAME}${{ matrix.ext }}"
          OUT="$("$BIN" -t 1000 -n 2 -r 127.0.0.1 127.0.0.10)"
          printf '%s\n' "$OUT"
          printf '%s\n' "$OUT" | grep -i 'up' >/dev/null

      - name: Smoke test ipchk (Windows)
        if: ${{ runner.os == 'Windows' && matrix.can_run == true }}
        shell: pwsh
        run: |
          $BIN = "target/${env:TARGET}/release/${env:BIN_NAME}${{ matrix.ext }}"
          $OUT = & $BIN -t 1000 -n 2 -r 127.0.0.1 127.0.0.10
          $OUT
          if (-not ($OUT -match 'up')) {
            Write-Error "No 'up' result found in smoke test output."
          }

      # ---------- Stage artifact ----------
      - name: Stage artifact [POSIX]
        if: ${{ runner.os != 'Windows' }}
        id: stage_posix
        shell: sh
        run: |
          set -eu
          OUTDIR="build"
          mkdir -p "$OUTDIR"
          SRC="target/${TARGET}/release/${BIN_NAME}${{ matrix.ext }}"
          OUTNAME="${BIN_NAME}-${TARGET}${{ matrix.ext }}"
          cp "$SRC" "$OUTDIR/$OUTNAME"
          printf 'OUTFILE=%s\n' "$OUTDIR/$OUTNAME" >> "$GITHUB_ENV"

      - name: Stage artifact [Windows]
        if: ${{ runner.os == 'Windows' }}
        id: stage_windows
        shell: pwsh
        run: |
          $OutDir = "build"
          New-Item -ItemType Directory -Force -Path $OutDir | Out-Null
          $Src = "target/${env:TARGET}/release/${env:BIN_NAME}${{ matrix.ext }}"
          $OutName = "${env:BIN_NAME}-${env:TARGET}${{ matrix.ext }}"
          Copy-Item $Src (Join-Path $OutDir $OutName)
          "OUTFILE=$OutDir\$OutName" | Out-File -FilePath $env:GITHUB_ENV -Append

      # ---------- Strip (POSIX only) ----------
      - name: Strip binary (Linux/macOS)
        if: ${{ runner.os != 'Windows' }}
        shell: sh
        run: |
          set -eu
          case "${{ matrix.target }}" in
            x86_64-unknown-linux-gnu)                  strip "${{ env.OUTFILE }}" ;;
            aarch64-unknown-linux-gnu)                 aarch64-linux-gnu-strip "${{ env.OUTFILE }}" ;;
            x86_64-apple-darwin|aarch64-apple-darwin)  strip -x "${{ env.OUTFILE }}" ;;
            *) : ;;
          esac

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BIN_NAME }}-${{ matrix.target }}
          path: ${{ env.OUTFILE }}

  release:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    env:
      BIN_NAME: ipchk
      VERSION: ${{ needs.prepare.outputs.version }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Generate checksums
        shell: sh
        run: |
          set -eu
          cd dist
          find . -type f -name "${BIN_NAME}-*" -print0 | while IFS= read -r -d '' f; do
            sha256sum "$f" > "$f.sha256"
            md5sum    "$f" > "$f.md5"
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: "v${{ env.VERSION }}: ${{ github.event.inputs.title }}"
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            dist/**/${{ env.BIN_NAME }}-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
